{"version":3,"sources":["state.ts","assets/images/rif-credential-viewer.svg","components/UserInput.tsx","components/ErrorComponent.tsx","operations.ts","components/LoadingComponent.tsx","constants.ts","components/MetaDataHelpers.tsx","components/ShowRawComponent.tsx","components/SchemaParserComponent.tsx","components/CredentialDisplay.tsx","components/PresentationDisplay.tsx","assets/images/powered-by-iov.svg","components/FooterComponent.tsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["appStatus","initialState","status","START","message","jwt","undefined","credential","UserInput","disabled","handleDecode","initialText","useState","jwtInput","setJwtInput","useEthSign","setUseEthSign","sharedProps","value","onChange","evt","target","className","type","checked","onClick","trim","replace","ErrorComponent","resolver","Resolver","getResolver","networks","name","rpcUrl","registry","verifyVerifiableJwt","ethSign","verifyJWT","LoadingComponent","style","textAlign","INVALID_SIGNATURE","FormatDateTimeItem","label","validation","valueDate","Date","valueString","toLocaleString","FormatMetaData","FormatDates","payload","iat","vp","exp","vc","nbf","ShowRawComponent","decoded","decodeJWT","decode","JSON","stringify","err","SchemaParserComponent","error","setError","parsed","setParsed","useEffect","result","parseVerifiableCredential","parseCredential","Object","keys","credentialSubject","map","key","text","prefix","en","CredentialDisplay","setEthSign","decodedCredential","setDecodedCredential","showRaw","setShowRaw","verify","then","response","catch","join","iss","sub","PresentationDisplay","presentation","issuer","verifiableCredential","FooterComponent","linkProps","rel","src","poweredByRif","alt","version","href","App","appState","setAppState","LOADING","DECODED","errorMessage","ERROR","initialJwt","window","location","search","startsWith","rifCredentialViewerLogo","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.8f65ae43.chunk.js","sourcesContent":["import { JWTVerified } from 'jesse-did-jwt'\n\n/* eslint-disable no-unused-vars */\nexport enum appStatus {\n  START = 'START',\n  LOADING = 'LOADING',\n  ERROR = 'ERROR',\n  DECODED = 'DECODED'\n}\n\nexport interface appStateInterface {\n  status: appStatus\n  message: string\n  jwt?: string\n  credential?: JWTVerified,\n}\n\nexport const initialState = {\n  status: appStatus.START,\n  message: '',\n  jwt: undefined,\n  credential: undefined\n}\n","export default __webpack_public_path__ + \"static/media/rif-credential-viewer.5cd41cae.svg\";","import React, { useState } from 'react'\n\ninterface UserInputInterface {\n  disabled: boolean\n  handleDecode: (jwt: string, useEthSign: boolean) => void\n  initialText?: string\n}\n\nconst UserInput: React.FC<UserInputInterface> = ({\n  disabled, handleDecode, initialText\n}) => {\n  const [jwtInput, setJwtInput] = useState<string>(initialText || '')\n  const [useEthSign, setUseEthSign] = useState<boolean>(true)\n\n  const sharedProps = { disabled }\n\n  return (\n    <div>\n      <textarea\n        {...sharedProps}\n        value={jwtInput}\n        onChange={(evt) => setJwtInput(evt.target.value)}\n        className=\"userInput\"\n      />\n      <p><label>\n        <input {...sharedProps} type=\"checkbox\" checked={useEthSign} className=\"ethSignCheck\" onChange={(evt) => setUseEthSign(evt.target.checked)} />\n        Use ethSign\n      </label></p>\n      <button\n        {...sharedProps}\n        onClick={() => handleDecode(jwtInput.trim().replace(/\\n/g, ' '), useEthSign)}\n        className=\"submit\"\n      >Decode JWT</button>\n    </div>\n  )\n}\n\nexport default UserInput\n","import React from 'react'\n\ninterface ErrorComponentInterface {\n  message: string\n}\n\nconst ErrorComponent: React.FC<ErrorComponentInterface> = ({ message }) => (\n  <p className=\"alert\">{message}</p>\n)\n\nexport default ErrorComponent\n","import { Resolver } from 'did-resolver'\nimport { getResolver } from 'ethr-did-resolver'\nimport { verifyJWT, decodeJWT, JWTPayload } from 'jesse-did-jwt'\nimport { parseVerifiableCredential } from '@rsksmart/vc-json-schemas-parser'\n\nconst providerConfig = {\n  networks: [\n    { name: 'rsk:testnet', rpcUrl: 'https://did.testnet.rsk.co:4444', registry: '0xdca7ef03e98e0dc2b855be647c39abe984fcf21b' },\n    { name: 'rsk', rpcUrl: 'https://did.rsk.co:4444', registry: '0xdca7ef03e98e0dc2b855be647c39abe984fcf21b' },\n    { name: 'mainnet', rpcUrl: 'https://mainnet.infura.io/v3/8c2e55bc61b94ad781c4deae786c4f58', registry: '0xdca7ef03e98e0dc2b855be647c39abe984fcf21b' }\n  ]\n}\n\nconst resolver = new Resolver(getResolver(providerConfig))\n\nexport const verifyVerifiableJwt = (jwt: string, ethSign: boolean) => {\n  // @ts-expect-error: resolver is incorrect type from did-jwt\n  return verifyJWT(jwt, { ethSign, resolver })\n}\n\nexport const decode = (jwt: string) => {\n  return decodeJWT(jwt)\n}\n\nexport const parseCredential = (type: string, payload: JWTPayload) => {\n  return parseVerifiableCredential(type, payload)\n}\n","import React from 'react'\n\nconst LoadingComponent: React.FC = () =>\n  <div className=\"panel\" style={{ textAlign: 'center' }}><div className=\"loader\"> </div></div>\n\nexport default LoadingComponent\n","export const INVALID_SIGNATURE = 'Signature invalid for JWT'\n","import { JWTPayload } from 'jesse-did-jwt'\nimport React from 'react'\n\ninterface FormatDateTimeI {\n  label: string;\n  value?: number | null,\n  validation?: 'PAST' | 'FUTURE'\n}\n/**\n * Single MetaDataRow with formatting for datetime strings\n * @param label string label to display\n * @param value number datetime represented in seconds since 1970\n * @param validation? PAST | FUTURE Check if the date should be before or after now()\n */\nexport const FormatDateTimeItem:React.FC<FormatDateTimeI> = ({ label, value, validation }) => {\n  if (!value) { return <></> }\n\n  const valueDate = new Date(value * 1000)\n  const valueString = valueDate.toLocaleString()\n\n  let className = 'datetime'\n  if ((validation === 'PAST' && valueDate < new Date()) || (validation === 'FUTURE' && valueDate > new Date())) {\n    className += ' alert'\n  }\n\n  return <FormatMetaData className={className} label={label} value={valueString} />\n}\n\n/**\n * Single MetaDataRow\n * @param label string label to display\n * @param value string value to display\n * @param className string, optional className for the row\n */\nexport const FormatMetaData:React.FC<{ label: string; value?: string; className?: string }> = ({ label, value, className }) =>\n  value ? (\n    <div className={className ? `container ${className}` : 'container'}>\n      <div className=\"column-3 label\"><p>{label}</p></div>\n      <div className=\"column-9 value\"><p>{value}</p></div>\n    </div>\n  ) : <></>\n\n/**\n * Format multiple dates\n * @param payload payload from a JWTCredential or Presentation\n */\nexport const FormatDates:React.FC<{ payload: JWTPayload }> = ({ payload }) => (\n  <>\n    <FormatDateTimeItem label=\"Issued At\" value={payload?.iat || null} />\n    <FormatDateTimeItem label=\"Expires\" value={payload.vp?.exp || payload.vc?.exp || null} validation=\"PAST\" />\n    <FormatDateTimeItem label=\"Not Valid Before\" value={payload?.nbf || null} validation=\"FUTURE\" />\n  </>\n)\n","import React from 'react'\nimport { decode } from '../operations'\n\ninterface ShowRawComponentInterface {\n  jwt: string\n}\n\nconst ShowRawComponent: React.FC<ShowRawComponentInterface> = ({ jwt }) => {\n  try {\n    const decoded = decode(jwt)\n    return (\n      <pre className=\"raw\">\n        {JSON.stringify(decoded, null, 2)}\n      </pre>\n    )\n  } catch (err: any) {\n    return <div className=\"alert\">{err.message}</div>\n  }\n}\n\nexport default ShowRawComponent\n","import { JWTPayload } from 'jesse-did-jwt'\nimport React, { useEffect, useState } from 'react'\nimport { parseCredential } from '../operations'\nimport { FormatMetaData } from './MetaDataHelpers'\n\ninterface SchemaParserComponentInterface {\n  payload: JWTPayload\n}\n\nconst SchemaParserComponent: React.FC<SchemaParserComponentInterface> = ({ payload }) => {\n  const [error, setError] = useState<string | null>(null)\n  const [parsed, setParsed] = useState<any | null>(null)\n  const type = payload.vc.type[1]\n\n  useEffect(() => {\n    try {\n      const result = parseCredential(type, payload.vc)\n      setParsed(result)\n    } catch (err: any) {\n      setError(err.message)\n    }\n  }, [payload])\n\n  return (\n    <div>\n      <h4>Contents</h4>\n      {error && (\n        <div className=\"invalid\">\n          <p className=\"alert\"><strong>{error}</strong></p>\n          {Object.keys(payload.vc.credentialSubject).map((key: string) => (\n            <FormatMetaData value={payload.vc.credentialSubject[key]} label={key} key={key} />\n          ))}\n        </div>\n      )}\n\n      {parsed && <FormatMetaData value={parsed[type].text} label={parsed[type].prefix.en} />}\n    </div>\n  )\n}\n\nexport default SchemaParserComponent\n","import { JWTVerified } from 'jesse-did-jwt'\nimport React, { useState, useEffect } from 'react'\nimport { INVALID_SIGNATURE } from '../constants'\nimport ErrorComponent from './ErrorComponent'\nimport LoadingComponent from './LoadingComponent'\nimport { FormatDates, FormatMetaData } from './MetaDataHelpers'\nimport ShowRawComponent from './ShowRawComponent'\nimport SchemaParserComponent from './SchemaParserComponent'\n\ninterface CredentialDisplayInterface {\n  jwt?: string\n  credential?: JWTVerified\n  verifyVerifiableJwt: (jwt: string, ethSign: boolean) => any\n}\n\nconst CredentialDisplay: React.FC<CredentialDisplayInterface> = ({ jwt, credential, verifyVerifiableJwt }) => {\n  const [ethSign, setEthSign] = useState<boolean>(false)\n  const [error, setError] = useState<string | null>(null)\n  const [decodedCredential, setDecodedCredential] = useState<JWTVerified | null>(null)\n  const [showRaw, setShowRaw] = useState<boolean>(false)\n\n  const verify = (useEthSign: boolean) => {\n    setError(null)\n    setEthSign(useEthSign)\n    verifyVerifiableJwt && jwt && verifyVerifiableJwt(jwt, useEthSign)\n      .then((response: JWTVerified) => setDecodedCredential(response))\n      .catch((err: Error) => setError(err.message))\n  }\n\n  useEffect(() => {\n    !credential ? verify(ethSign) : setDecodedCredential(credential)\n  }, [jwt])\n\n  if (error) {\n    return (\n      <div className=\"panel error\">\n        <h3>VerifiableCredential</h3>\n        <ErrorComponent message={error} />\n        {(error === INVALID_SIGNATURE) && (\n          <button onClick={() => { verify(!ethSign) }}>\n            Try again <strong>{ethSign ? 'without' : 'with'}</strong> eth sign.\n          </button>\n        )}\n      </div>\n    )\n  }\n\n  if (!decodedCredential) {\n    return <LoadingComponent />\n  }\n\n  const payload = decodedCredential.payload\n\n  return (\n    <div className=\"panel credential\">\n      <div className=\"container\">\n        <div className=\"column\">\n          <h3>{payload.vc.type?.join(': ')}</h3>\n        </div>\n        <div className=\"column\">\n          <button className=\"raw link\" onClick={() => setShowRaw(!showRaw)}>\n            {showRaw ? 'Hide' : 'Show'} Raw\n          </button>\n        </div>\n      </div>\n      {showRaw && jwt && <ShowRawComponent jwt={jwt} />}\n      <FormatMetaData className=\"did\" label=\"Issuer\" value={payload.iss} />\n      <FormatMetaData className=\"did\" label=\"Subject\" value={payload.sub} />\n      <FormatDates payload={payload} />\n\n      <SchemaParserComponent payload={decodedCredential.payload} />\n    </div>\n  )\n}\n\nexport default CredentialDisplay\n","import React, { useState } from 'react'\nimport { JWTVerified } from 'jesse-did-jwt'\nimport CredentialDisplay from './CredentialDisplay'\nimport { FormatDates, FormatMetaData } from './MetaDataHelpers'\nimport ShowRawComponent from './ShowRawComponent'\n\ninterface PresentationDisplayInterface {\n  jwt?: string\n  presentation: JWTVerified\n  verifyVerifiableJwt: (jwt: string, ethSign: boolean) => Promise<JWTVerified>\n}\n\nconst PresentationDisplay: React.FC<PresentationDisplayInterface> = ({ jwt, presentation, verifyVerifiableJwt }) => {\n  const [showRaw, setShowRaw] = useState<boolean>(false)\n\n  return (\n    <div className=\"panel presentation\">\n      <div className=\"container\">\n        <div className=\"column\">\n          <h3>{presentation.payload.vp.type?.join(': ')}</h3>\n        </div>\n        <div className=\"column\">\n          <button className=\"raw link\" onClick={() => setShowRaw(!showRaw)}>\n            {showRaw ? 'Hide' : 'Show'} Raw\n          </button>\n        </div>\n      </div>\n\n      {jwt && showRaw && <ShowRawComponent jwt={jwt} />}\n\n      <FormatMetaData className=\"did\" label=\"Issuer\" value={presentation.issuer} />\n      <FormatDates payload={presentation.payload} />\n\n      {presentation.payload.vp.verifiableCredential.map((jwt: string) => (\n        <CredentialDisplay jwt={jwt} key={jwt} verifyVerifiableJwt={verifyVerifiableJwt} />\n      ))}\n    </div>\n  )\n}\n\nexport default PresentationDisplay\n","export default __webpack_public_path__ + \"static/media/powered-by-iov.5db81567.svg\";","import React from 'react'\nimport poweredByRif from '../assets/images/powered-by-iov.svg'\nimport { version } from '../../package.json'\n\nconst FooterComponent: React.FC = () => {\n  const linkProps = {\n    rel: 'noreferrer',\n    target: '_blank'\n  }\n\n  return (\n    <div className=\"container footer\">\n      <div className=\"column-4\">\n        <img src={poweredByRif} alt=\"Powered By RIF\" />\n        <p>Copyright &copy; 2021 IOV Labs. All rights reserved.</p>\n        <p>Version {version}</p>\n      </div>\n      <div className=\"column-4\">\n        <h2>RIF Identity Products</h2>\n        <ul>\n          <li><a href=\"https://rsksmart.github.io/rif-identity-manager/\" {...linkProps}>RIF Identity Manager</a></li>\n          <li><a href=\"https://rsksmart.github.io/email-vc-issuer/\" {...linkProps}>Email Verifiable Credential Issuer</a></li>\n          <li><a href=\"https://developers.rsk.co/rif/identity/\" {...linkProps}>RIF Identity Documentation</a></li>\n        </ul>\n      </div>\n      <div className=\"column-4\">\n        <h2>RNS Products</h2>\n        <ul>\n          <li><a href=\"https://manager.rns.rifos.org/\" {...linkProps}>RNS Domain Manager</a></li>\n          <li><a href=\"https://developers.rsk.co/rif/rns/\" {...linkProps}>RNS Documentation</a></li>\n        </ul>\n      </div>\n    </div>\n  )\n}\n\nexport default FooterComponent\n","import React, { useEffect, useState } from 'react'\nimport rifCredentialViewerLogo from './assets/images/rif-credential-viewer.svg'\nimport './assets/scss/_index.scss'\nimport { appStatus, appStateInterface, initialState } from './state'\nimport UserInput from './components/UserInput'\nimport ErrorComponent from './components/ErrorComponent'\nimport { verifyVerifiableJwt } from './operations'\nimport LoadingComponent from './components/LoadingComponent'\nimport PresentationDisplay from './components/PresentationDisplay'\nimport { INVALID_SIGNATURE } from './constants'\nimport CredentialDisplay from './components/CredentialDisplay'\nimport { JWTVerified } from 'jesse-did-jwt'\nimport FooterComponent from './components/FooterComponent'\n\nfunction App () {\n  const [appState, setAppState] = useState<appStateInterface>(initialState)\n\n  const decode = (jwt: string, useEthSign: boolean) => {\n    setAppState({ ...initialState, status: appStatus.LOADING })\n\n    verifyVerifiableJwt(jwt, useEthSign)\n      .then((credential: JWTVerified) =>\n        setAppState({ ...appState, jwt, credential, status: appStatus.DECODED }))\n      .catch((err: Error) => {\n        const errorMessage = err.message === INVALID_SIGNATURE ? `${err.message}, try toggling 'Use ethSign'.` : err.message\n        setAppState({ ...initialState, message: errorMessage, status: appStatus.ERROR })\n      })\n  }\n\n  const initialJwt = window.location.search.startsWith('?jwt=') ? window.location.search.replace('?jwt=', '') : ''\n  useEffect(() => {\n    if (initialJwt !== '') {\n      decode(initialJwt, true)\n    }\n  }, [window.location.search])\n\n  return (\n    <div className=\"App\">\n      <div className=\"container header\">\n        <div className=\"column\">\n          <img src={rifCredentialViewerLogo} alt=\"RIF Credential Viewer\" />\n        </div>\n      </div>\n\n      <div className=\"container content\">\n        <div className=\"column column-6\">\n          <h2>Raw JWT</h2>\n          <UserInput\n            disabled={appState.status === appStatus.LOADING}\n            handleDecode={decode}\n            initialText={initialJwt}\n          />\n        </div>\n        <div className=\"column column-6\">\n          <h2>Decoded</h2>\n          {appState.credential && appState.credential.payload.vp &&\n            <PresentationDisplay presentation={appState.credential} verifyVerifiableJwt={verifyVerifiableJwt} jwt={appState.jwt} />}\n          {appState.credential && appState.credential.payload.vc &&\n            <CredentialDisplay credential={appState.credential} verifyVerifiableJwt={verifyVerifiableJwt} jwt={appState.jwt} />}\n          {appState.status === appStatus.ERROR && (\n            <div className=\"panel\">\n              <ErrorComponent message={appState.message} />\n            </div>\n          )}\n          {appState.status === appStatus.LOADING && <LoadingComponent />}\n        </div>\n      </div>\n\n      <FooterComponent />\n    </div>\n  )\n}\n\nexport default App\n","import { ReportHandler } from 'web-vitals'\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry)\n      getFID(onPerfEntry)\n      getFCP(onPerfEntry)\n      getLCP(onPerfEntry)\n      getTTFB(onPerfEntry)\n    })\n  }\n}\n\nexport default reportWebVitals\n","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport App from './App'\nimport reportWebVitals from './reportWebVitals'\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n)\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals()\n"],"sourceRoot":""}